using kermeta::standard::*
using kermeta::io::StdIO => stdio
using kermeta::emfpersistence::*
using collaviz::Collaviz
using collaviz::WorldObject
using collaviz::SupportedObject
using VisitorMondePackage::*
using Generator::WorldGenerator
using kermeta::io::FileIO
using Helper::*

package mainPackage{
	class MainGenerator
	{
		
		@main "" // declares that operation as a possible entry point of the program
		operation mainOperation(uriModel : String, nameWorld : String) : Void is do 
			//chargement du model
			stdio.writeln("loading model")						
			var c : Collaviz
			var helper : CollavizHelper init CollavizHelper.new
			c ?= helper.loadModel(uriModel)
			var visitor : VisitorInterface init VisitorCollaviz.new
			if c!= void then
				stdio.writeln("load model success")
				c.checkAllInvariants()
				
				var generateWorld : String init ""
				generateWorld ?= c.accept(visitor,"")
				stdio.writeln("saving world")
				var resWorld : String
				resWorld ?= "platform:/resource/CollavizKermeta2/src/main/world/"+nameWorld
				
				FileIO.writeTextFile(resWorld.toURI(),generateWorld.toString())
				
				stdio.writeln("save world success")
				
			else
				stdio.writeln("load model failed")
			end
			
		end
	}
}