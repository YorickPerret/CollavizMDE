using kermeta::standard::*
using kermeta::io::StdIO => stdio
using VisitorMondePackage::Visitable
using VisitorMondePackage::VisitorInterface

package collaviz{
	
	/*design pattern visitor*/
	aspect class Collaviz inherits Visitable
	{
		method accept(v : VisitorInterface, indentation : String) : String
		is do
			result ?= v.visitCollaviz(self,indentation)
		end
	}	

	aspect abstract class WorldObject inherits Visitable
	{
		attribute visit : Boolean
		method accept(v : VisitorInterface, indentation : String) : String
		is do
			result ?= "visit world object"
		end	
	}

	aspect class Ball inherits Visitable
	{		
		method accept(v : VisitorInterface, indentation : String) : String
		is do
			result ?= v.visitBall(self,indentation)
		end
	}
	aspect class Juncture inherits Visitable
	{
		method accept(v : VisitorInterface, indentation : String) : String
		is do
			result ?= v.visitJuncture(self,indentation)
		end
	}
	
	aspect abstract class Light inherits Visitable
	{
		method accept(v : VisitorInterface, indentation : String) : String
		is do
			result ?= "visit light"
		end	
	}
	
	aspect class DirectionalLight inherits Visitable
	{
		method accept(v : VisitorInterface, indentation : String) : String
		is do
			result ?= v.visitDirectionalLight(self,indentation)
		end
	}
	
	aspect class PointLight inherits Visitable
	{
		method accept(v : VisitorInterface, indentation : String) : String
		is do
			result ?= v.visitPointLight(self,indentation)
		end
	}
}