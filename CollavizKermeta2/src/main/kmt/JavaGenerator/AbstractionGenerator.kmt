using kermeta::standard::*
using kermeta::io::StdIO => stdio
using kermeta::io::FileIO
using ecore::*
using Helper::*

package JavaGenerator{
	class AbstractionGenerator inherits Generator, GenericGenerator
	{
		method generate(p : EPackage) : Void is do 
			var helper : CollavizHelper init CollavizHelper.new
			helper.initAuthorizedClasses()
			p.eClassifiers.each {c |
				if helper.isAuthorizedClasse(c.name) then
					var clazz : EClass
					clazz?=c
					if clazz != void then
						//abstractions
						generateAbstractionsClasses(clazz)						
					end
				end
			}			
		end
		operation generateAbstractionsClasses(clazz : EClass) : Void is do
			//generating classes
			var buffer : StringBuffer init StringBuffer.new
			
			stdio.writeln("\n******** Generating classe abstraction A_"+clazz.name+" ********")
			var superType : EClass init clazz.eSuperTypes.one
			buffer.append(generatePackage(clazz))
			buffer.append(generateImport(clazz))
			buffer.append(generateBeginClasse(clazz))
			
			clazz.eStructuralFeatures.each { a |
				buffer.append(generateAttribute(a))
			}
			
			buffer.append("\n")
				
			buffer.append(generateConstructor(clazz))
			
			clazz.eOperations.each { o |
				buffer.append(generateOperation(o))
			}
			
			buffer.append(generateProcessUpdate(clazz))
			buffer.append(generateProcessModify(clazz))			
			
			var tmp : String init generateEndClasse()
			buffer.append(tmp)
			stdio.writeln("generating classe done")
			
			//save files
			stdio.writeln("******** Saving classe abstraction A_"+clazz.name+" ********")
			
			var resAbstraction : String init "platform:/resource/CollavizKermeta2/src/main/JavaCode/Abstraction/A_"+clazz.name+".java"
			FileIO.writeTextFile(resAbstraction.toURI(),buffer.toString())

			
			stdio.writeln("******** Save success ********")
		end
		
		method generatePackage(clazz : EClass) : String is do
			result?="package org.collaviz.iivc.abstraction;\n"
		end	
		
		method generateImport(clazz : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("import org.collaviz.collaboration.objects.control.IC_ObjectManager ;\n")
			buffer.append("import org.collaviz.collaboration.objects.utils.ICallbackHandler ;\n")
			buffer.append("import org.collaviz.collaboration.objects.utils.Transform ;\n\n")
			result?=buffer.toString()
		end
		
		method generateBeginClasse(eclass : EClass) : String is do
			var esuperclass : EClass
			esuperclass ?= eclass.eSuperTypes.one
			result?="public class A_"+eclass.name+" extends A_"+esuperclass.name+" implements IA_"+eclass.name+" {\n\n"
		end
		
		

	
		
		method generateConstructor(clazz : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("	public A_"+clazz.name+" (String objectType, String objectName, IC_ObjectManager objectManager) {\n")
			buffer.append("		super (objectType, objectName, objectManager) ;\n\n")
			
			//parameters
			clazz.eStructuralFeatures.each { a |
				buffer.append(generateParameterPut(a))
			}
			buffer.append("\n")
			//registerModificationCallBack
			clazz.eOperations.each { o |
				buffer.append(generateRegisterOperation(o))
			}
			
			buffer.append("\n	}\n\n")
			
			result?=buffer.toString()
		end
		
		operation generateParameterPut(a : EStructuralFeature) : String is do
			result?="		parameters.put(\""+a.name.toUpperCase()+"\","+a.name+");\n"
		end
		
		operation generateRegisterOperation(o : EOperation) : String is do
			var buffer : StringBuffer init StringBuffer.new
			var helper : CollavizHelper init CollavizHelper.new
			buffer.append("		registerModificationCallback (\""+o.name+"\", new ICallbackHandler () {\n")
			buffer.append("			@Override\n")
			buffer.append("			public void callback (Object [] args) {\n")
			//parameters
			var nbTmp : Integer init 0
			
			o.eParameters.each {p |
				//world object ?
				var ref : EClass
				var ic : String init ""
				ref ?= p.eType
				if ref!=void then
					var isWorldObject : Boolean init helper.isExtendsObject(ref,"WorldObject")
					if isWorldObject == true then
						ic :="IC_"
					end
				end
				var array : String init ""
				if p.upperBound != 1 then
					array := "[]"					
				end
				buffer.append("				final "+ic+p.eType.name+array+" _"+p.name+" = ("+ic+p.eType.name+array+")args["+nbTmp+"];\n")
				nbTmp:=nbTmp+1
			}        
			buffer.append("				"+o.name+"(")
			var virgule : Boolean init false
			o.eParameters.each {p |
				if virgule==true then
					buffer.append(",")
				else
					virgule:=true
				end
				buffer.append("_"+p.name)
				nbTmp:=nbTmp+1
			}
			buffer.append(");\n")
			buffer.append("			}\n")
			buffer.append("		});\n")
		
			result ?= buffer.toString()
		end
	

		method generateOperation(o : EOperation) : String is do
			var buffer : StringBuffer init StringBuffer.new
			var helper : CollavizHelper init CollavizHelper.new
			var typeRetour : EClass
			var ic : String init ""
			typeRetour ?=o.eType
			if typeRetour != void then
				var isExtendsWorldObject : Boolean init helper.isExtendsObject(typeRetour,"WorldObject")
				if isExtendsWorldObject==true then
					ic := "IC_"
				end
			end
			var array : String init ""
			if o.upperBound != 1 then
				array := "[]"		
			end
			
			buffer.append("	@Override\n")
			buffer.append("	public "+ic+o.eType.name+array+" "+ o.name+" (")
			//parameters
			var virgule : Boolean init false
			o.eParameters.each{ p |
				if virgule==true then
					//others parameters
					buffer.append(", ")
				else
					//first parameter
					virgule:=true
				end
				
				var typeParam : EClass
				var icParam : String init ""
				typeParam ?=p.eType
				if typeParam != void then
					var isExtendsWorldObject : Boolean init helper.isExtendsObject(typeParam,"WorldObject")
					if isExtendsWorldObject==true then
						icParam := "IC_"
					end
				end
				var arrayParam : String init ""
				if p.upperBound != 1 then
					arrayParam := "[]"		
				end
				buffer.append(icParam+p.eType.name+arrayParam+" "+p.name)
			}
			buffer.append("){\n")
			
			buffer.append("		//you have to add modifications.put(\"ParameterName\", val);\n		//for each paramater you want to update\n ")
			
			buffer.append("	}\n\n")
			   
   
			result?=buffer.toString()		
		end
		
		method generateAttribute(a : EStructuralFeature) : String is do
			var buffer : StringBuffer init StringBuffer.new
			var helper : CollavizHelper init CollavizHelper.new
			var ref : EReference
			var ic : String init ""
			ref ?=a
			if ref != void then
				var isExtendsWorldObject : Boolean init helper.isExtendsObject(ref.eReferenceType,"WorldObject")
				if isExtendsWorldObject==true then
					ic := "IC_"
				end
			end
			var array : String init ""
			if a.upperBound != 1 then
				array := "[]"		
			end
			var val : String init ""
			if a.defaultValueLiteral != void then
				val := " = "+a.defaultValueLiteral+";\n"
			else
				val := " = null ;\n"
			end
			buffer.append("	protected "+ic+a.eType.name+array+" "+a.name+val)
			result?=buffer.toString()
		end
		
		operation generateProcessUpdate(clazz : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			var helper : CollavizHelper init CollavizHelper.new
			buffer.append("	@Override\n")
			buffer.append("	protected void processUpdate (Map<String, Object> params) {\n")
			buffer.append("		super.processUpdate (params) ;\n\n")
			//parameters
			clazz.eStructuralFeatures.each { a |
				//eattribute or ereference
				var eref : EReference
				var eattr : EAttribute
				var ic : String init ""
				var type : String init a.eType.name
				var array : String init ""
				eref ?= a
				if eref != void then
					var isExtendsWorldObject : Boolean init helper.isExtendsObject(eref.eReferenceType,"WorldObject")
					if isExtendsWorldObject==true then
						ic := "IC_"
					end
				end
				if a.upperBound!=1 then
					array:="[]"
				end

				buffer.append("		final "+ic+type+array+" _"+a.name+" = ("+ic+type+array+")params.get(\""+a.name.toUpperCase()+"\");\n")
				buffer.append("		if(_"+a.name+"!=null){\n")	
				buffer.append("			this."+a.name+"=_"+a.name+";\n")
				buffer.append("			parameters.put(\""+a.name.toUpperCase()+"\",this."+a.name+");\n")
				buffer.append("		}\n\n")		
			}
			buffer.append("	}\n")
			result?=buffer.toString()
		end

		
		operation generateProcessModify(clazz : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			var helper : CollavizHelper init CollavizHelper.new
			buffer.append("	@Override\n")
			buffer.append("	protected void processModify (Map<String, Object> params) {\n")
			buffer.append("		super.processModify (params) ;\n\n")
			//parameters
			clazz.eStructuralFeatures.each { a |
				//eattribute or ereference
				var eref : EReference
				var ic : String init ""
				var type : String init a.eType.name
				var array : String init ""
				eref ?= a
				if eref != void then
					var isExtendsWorldObject : Boolean init helper.isExtendsObject(eref.eReferenceType,"WorldObject")
					if isExtendsWorldObject==true then
						ic := "IC_"
					end
				end
				if a.upperBound!=1 then
					array:="[]"
				end

				buffer.append("		final "+ic+type+array+" "+a.name+" = ("+ic+type+array+")params.get(\""+a.name.toUpperCase()+"\");\n")
				buffer.append("		if(_"+a.name+"!=null){\n")	
				buffer.append("			this."+a.name+"=_"+a.name+";\n")
				buffer.append("			modifications.put(\""+a.name.toUpperCase()+"\",this."+a.name+");\n")
				buffer.append("		}\n\n")		
			}
			buffer.append("	}\n")
			result?=buffer.toString()
		end	
	}
}