using kermeta::standard::*
using kermeta::io::StdIO => stdio
using kermeta::io::FileIO
using ecore::*
using Helper::*

package JavaGenerator{
	class AbstractionGenerator inherits Generator, GenericGenerator
	{
		attribute helper : CollavizHelper
		
		method generate(p : EPackage) : Void is do 
			helper := CollavizHelper.new
			helper.initAuthorizedClasses()
			p.eClassifiers.each {c |
				if helper.isAuthorizedClasse(c.name) then
					var clazz : EClass
					clazz?=c
					if clazz != void then
						//abstractions
						generateAbstractionsClasses(clazz)						
					end
				end
			}			
		end
		operation generateAbstractionsClasses(clazz : EClass) : Void is do
			//generating classes
			var buffer : StringBuffer init StringBuffer.new
			stdio.writeln("\n******** Generating classe abstraction A_"+clazz.name+" ********")
			var superType : EClass init clazz.eSuperTypes.one
			buffer.append(generatePackage(clazz))
			buffer.append(generateImport(clazz))
			buffer.append(generateBeginClasse(clazz))
			
			clazz.eStructuralFeatures.each { a |
				if isObservableFeature(a) then
					buffer.append(generateFeatureObservable(a))
				end
				buffer.append(generateAttribute(a))
				
			}
			
			buffer.append("\n")
				
			buffer.append(generateConstructor(clazz))
			
			clazz.eOperations.each { o |
				buffer.append(generateOperation(o))
			}
			
			
			
			buffer.append(generateProcessUpdate(clazz))
			buffer.append(generateProcessModify(clazz))		
			
			if mustGenerateObservedPropertiesChanged(clazz) then
				stdio.writeln(" mustGenerateObservedPropertiesChanged")
				var listFeatures : Sequence<EStructuralFeature> init Sequence<EStructuralFeature>.new
				listFeatures ?= getObservableFeatures(clazz)
				buffer.append(generateObservedPropertiesChanged(listFeatures))
			end	
			
			var tmp : String init generateEndClasse()
			buffer.append(tmp)
			stdio.writeln("generating classe done")
			
			//save files
			stdio.writeln("******** Saving classe abstraction A_"+clazz.name+" ********")
			
			var resAbstraction : String init helper.getPathToSaveJavaCode()+"/Abstraction/A_"+clazz.name+".java"
			FileIO.writeTextFile(resAbstraction.toURI(),buffer.toString())

			
			stdio.writeln("******** Save success ********")
		end

   
   		operation mustGenerateObservedPropertiesChanged(clazz : EClass) : Boolean is do
   			result := clazz.eStructuralFeatures.exists{ f |
            	f.eAnnotations.exists{ eannotation |
	        		eannotation.details.exists { es |
	        			es.key == "observability" and es.~value=="true"
	        		}
	        	}
            }
   		end
   
   		operation generateObservedPropertiesChanged(listFeatures : Sequence<EStructuralFeature>) : String is do
   			var buffer : StringBuffer init StringBuffer.new
   			if listFeatures!=void then
   				buffer.append("	@Override\n")
	   			buffer.append("	public void observedPropertiesChanged (String obsName, Map<String, Object> chang) {\n")
	   			buffer.append("		super.observedPropertiesChanged(obsName, chang);\n")
	   			buffer.append("		boolean modified = false ;\n")
	   			
	   			listFeatures.each { f |
	   				buffer.append("		if ("+f.name+"Id != null && "+f.name+"Id.equals(obsName)) {\n")
	   				buffer.append("			final HashMap<String, Double> targetTransformMap = (HashMap<String, Double>) chang.get(\"Transform\");\n")
	   				buffer.append("			if (targetTransformMap != null) {\n")
	   				buffer.append("				modified = true ;\n")
	   				buffer.append("				"+f.name+"Transform = new Transform(targetTransformMap);\n")
	   				buffer.append("			}\n")
	   				
	   				buffer.append("			final Boolean isVisible"+helper.firstLetterUpperCase(f.name)+" = (Boolean) chang.get(\"IsVisible\");\n")
	   				buffer.append("			if (isVisible"+helper.firstLetterUpperCase(f.name)+" != null) {\n")
	   				buffer.append("				boolean myIsVisible = isVisible"+helper.firstLetterUpperCase(f.name)+";\n")
	   				buffer.append("				modifications.put(\"IsVisible\", myIsVisible);\n")
	   				buffer.append("				modified();\n")
	   				buffer.append("			}\n")
	   				
	   				buffer.append("		}\n")
	   				   					   			
	   			}	   		
	   			
	   			
      			buffer.append("		if (modified) {\n")
      			buffer.append("			computePosition () ;\n")
      			buffer.append("			modified () ;\n")
      			buffer.append("		}\n")
      			
      			buffer.append("	}\n\n")
      			
      			//computePosition()
      			buffer.append("	private void computePosition () {\n")
      			buffer.append("		if (")
      			var AND : Boolean init false
      			listFeatures.each { f |
      				if AND==true then
						buffer.append(" && ")
					else
						AND:=true
					end
      				buffer.append("("+f.name+"Transform != null)")
      			}
      			buffer.append("){\n")
      			
      			buffer.append("		}\n")      			
      			buffer.append("	}\n\n")
   			end
   			result?=buffer.toString()
   		end
   
        operation getObservableFeatures(clazz : EClass) : Sequence<EStructuralFeature> is do
           var list : Sequence<EStructuralFeature> init Sequence<EStructuralFeature>.new
           list := clazz.eStructuralFeatures.select{ f |
            	f.eAnnotations.exists{ eannotation |
	        		eannotation.details.exists { es |
	        			es.key == "observability" and es.~value=="true"
	        		}
	        	}
            }
            result?=list
        end
        
        operation isObservableFeature(feature : EStructuralFeature) : Boolean is do
        	var res : Boolean init false
        	res := feature.eAnnotations.exists{ eannotation |
        		eannotation.details.exists { es |
        			es.key == "observability" and es.~value=="true"
        		}
        	}
        	result?=res
        end
        
        operation generateFeatureObservable(feature : EStructuralFeature) : String is do
        	var buffer : StringBuffer init StringBuffer.new
        	buffer.append("	//"+feature.name+"Id and "+feature.name+"Transform are used by observedPropertiesChanged()\n")
        	buffer.append("	protected String "+feature.name+"Id;\n")
        	buffer.append("	protected Transform "+feature.name+"Transform;\n")
        	result?=buffer.toString()
        end
		
		method generatePackage(clazz : EClass) : String is do
			result?="package org.collaviz.iivc.abstraction;\n"
		end	
		
		method generateImport(clazz : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("import org.collaviz.collaboration.objects.control.IC_ObjectManager ;\n")
			buffer.append("import org.collaviz.collaboration.objects.utils.ICallbackHandler ;\n")
			buffer.append("import org.collaviz.collaboration.objects.utils.Transform ;\n\n")
			result?=buffer.toString()
		end
		
		method generateBeginClasse(eclass : EClass) : String is do
			var esuperclass : EClass
			esuperclass ?= eclass.eSuperTypes.one
			result?="public class A_"+eclass.name+" extends A_"+esuperclass.name+" implements IA_"+eclass.name+" {\n\n"
		end
		
		

	
		
		method generateConstructor(clazz : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("	public A_"+clazz.name+" (String objectType, String objectName, IC_ObjectManager objectManager) {\n")
			buffer.append("		super (objectType, objectName, objectManager) ;\n\n")
			
			//parameters
			clazz.eStructuralFeatures.each { a |
				if isObservableFeature(a) then
					buffer.append(generateParameterPutObservable(a))
				else
					buffer.append(generateParameterPut(a))
				end
			}
			buffer.append("\n")
			//registerModificationCallBack
			clazz.eOperations.each { o |
				buffer.append(generateRegisterOperation(o))
			}
			
			buffer.append("\n	}\n\n")
			
			result?=buffer.toString()
		end
		
		operation generateParameterPut(a : EStructuralFeature) : String is do
			result?="		parameters.put(\""+helper.firstLetterUpperCase(a.name)+"\","+a.name+");\n"
		end
		
		
		operation generateParameterPutObservable(a : EStructuralFeature) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("		"+a.name+"Id = null;\n")
			buffer.append("		parameters.put(\""+helper.firstLetterUpperCase(a.name)+"\","+a.name+"Id);\n")
			result?=buffer.toString()
		end
		
		operation generateRegisterOperation(o : EOperation) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("		registerModificationCallback (\""+o.name+"\", new ICallbackHandler () {\n")
			buffer.append("			@Override\n")
			buffer.append("			public void callback (Object [] args) {\n")
			//parameters
			var nbTmp : Integer init 0
			
			o.eParameters.each {p |
				//world object ?
				var ref : EClass
				var ic : String init ""
				ref ?= p.eType
				if ref!=void then
					var isWorldObject : Boolean init helper.isExtendsObject(ref,"WorldObject")
					if isWorldObject == true then
						ic :="IA_"
					end
				end
				var array : String init ""
				if p.upperBound != 1 then
					array := "[]"					
				end
				buffer.append("				final "+ic+p.eType.name+array+" _"+p.name+" = ("+ic+p.eType.name+array+")args["+nbTmp+"];\n")
				nbTmp:=nbTmp+1
			}        
			buffer.append("				"+o.name+"(")
			var virgule : Boolean init false
			o.eParameters.each {p |
				if virgule==true then
					buffer.append(",")
				else
					virgule:=true
				end
				buffer.append("_"+p.name)
				nbTmp:=nbTmp+1
			}
			buffer.append(");\n")
			buffer.append("			}\n")
			buffer.append("		});\n")
		
			result ?= buffer.toString()
		end
	

		method generateOperation(o : EOperation) : String is do
			var buffer : StringBuffer init StringBuffer.new
			var typeRetour : EClass
			var ic : String init ""
			typeRetour ?=o.eType
			if typeRetour != void then
				var isExtendsWorldObject : Boolean init helper.isExtendsObject(typeRetour,"WorldObject")
				if isExtendsWorldObject==true then
					ic := "IA_"
				end
			end
			var array : String init ""
			if o.upperBound != 1 then
				array := "[]"		
			end
			
			buffer.append("	@Override\n")
			buffer.append("	public "+ic+o.eType.name+array+" "+ o.name+" (")
			//parameters
			var virgule : Boolean init false
			o.eParameters.each{ p |
				if virgule==true then
					//others parameters
					buffer.append(", ")
				else
					//first parameter
					virgule:=true
				end
				buffer.append(generateParameterOperation(p))
			}
			buffer.append("){\n")
			
			buffer.append("		//you have to add modifications.put(\"ParameterName\", val);\n		//for each paramater you want to update\n ")
			
			buffer.append("	}\n\n")
			   
   
			result?=buffer.toString()		
		end
		
		operation generateParameterOperation(p : EParameter) : String is do
			var buffer : StringBuffer init StringBuffer.new
			var typeParam : EClass
			var icParam : String init ""
			typeParam ?=p.eType
			if typeParam != void then
				var isExtendsWorldObject : Boolean init helper.isExtendsObject(typeParam,"WorldObject")
				if isExtendsWorldObject==true then
					icParam := "IA_"
				end
			end
			var arrayParam : String init ""
			if p.upperBound != 1 then
				arrayParam := "[]"		
			end
			buffer.append(icParam+p.eType.name+arrayParam+" "+p.name)			
			result?=buffer.toString()
		end
		
		method generateAttribute(a : EStructuralFeature) : String is do
			var buffer : StringBuffer init StringBuffer.new
			var ref : EReference
			var ic : String init ""
			ref ?=a
			if ref != void then
				var isExtendsWorldObject : Boolean init helper.isExtendsObject(ref.eReferenceType,"WorldObject")
				if isExtendsWorldObject==true then
					ic := "IA_"
				end
			end
			var array : String init ""
			if a.upperBound != 1 then
				array := "[]"		
			end
			var val : String init ""
			if a.defaultValueLiteral != void then
				val := " = "+a.defaultValueLiteral+";\n"
			else
				val := " = null ;\n"
			end
			buffer.append("	protected "+ic+a.eType.name+array+" "+a.name+val)
			result?=buffer.toString()
		end
		
		operation generateProcessUpdate(clazz : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("	@Override\n")
			buffer.append("	protected void processUpdate (Map<String, Object> params) {\n")
			buffer.append("		super.processUpdate (params) ;\n\n")
			//parameters
			clazz.eStructuralFeatures.each { a |
				if isObservableFeature(a) then
					buffer.append(generateObservableProcessUpdate(a))
				else
					buffer.append(generateNormalProcessUpdate(a))
				end
			}
			buffer.append("	}\n")
			result?=buffer.toString()
		end
		
		

		
		operation generateObservableProcessUpdate(a : EStructuralFeature) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("		final String _"+a.name+" = (String)params.get(\""+helper.firstLetterUpperCase(a.name)+"\");\n")
			buffer.append("		if(_"+a.name+"!=null){\n")	
			buffer.append(generateAssignmentObservable(a))
			buffer.append("			parameters.put(\""+helper.firstLetterUpperCase(a.name)+"\",this."+a.name+"Id);\n")
			buffer.append("		}\n\n")	
			result?= buffer.toString()
		end
		
		operation generateNormalProcessUpdate(a : EStructuralFeature) : String is do
			var buffer : StringBuffer init StringBuffer.new
			var eref : EReference
			var eattr : EAttribute
			var ic : String init ""
			var type : String init a.eType.name
			var array : String init ""
			eref ?= a
			if eref != void then
				var isExtendsWorldObject : Boolean init helper.isExtendsObject(eref.eReferenceType,"WorldObject")
				if isExtendsWorldObject==true then
					ic := "IA_"
				end
			end
			if a.upperBound!=1 then
				array:="[]"
			end

			buffer.append("		final "+ic+type+array+" _"+a.name+" = ("+ic+type+array+")params.get(\""+helper.firstLetterUpperCase(a.name)+"\");\n")
			buffer.append("		if(_"+a.name+"!=null){\n")	
			buffer.append(generateAssignment(a))
			buffer.append("			parameters.put(\""+helper.firstLetterUpperCase(a.name)+"\",this."+a.name+");\n")
			buffer.append("		}\n\n")	
			result?= buffer.toString()
		end

		operation generateAssignment(a : EStructuralFeature) : String is do
			var buffer : StringBuffer init StringBuffer.new
			if a.upperBound != 1 then
				buffer.append("			for(int i = 0; i<_"+a.name+".length ; i++){\n")
				buffer.append("				"+a.name+"[i] = _"+a.name+"[i];\n")
				buffer.append("			}\n")
			else
				buffer.append("			this."+a.name+"=_"+a.name+";\n")
			end
			result?=buffer.toString()
		end
		
		operation generateAssignmentObservable(a : EStructuralFeature) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("			this."+a.name+"Id=_"+a.name+";\n")
			result?=buffer.toString()
		end

		

		operation generateProcessModify(clazz : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("	@Override\n")
			buffer.append("	protected void processModify (Map<String, Object> params) {\n")
			buffer.append("		super.processModify (params) ;\n\n")
			//parameters
			clazz.eStructuralFeatures.each { a |
				if isObservableFeature(a) then
					buffer.append(generateObservableProcessModify(a))
				else
					buffer.append(generateNormalProcessModify(a))
				end
			}
			buffer.append("	}\n")
			result?=buffer.toString()
		end	
		
		operation generateObservableProcessModify(a : EStructuralFeature) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("		final String _"+a.name+" = (String)params.get(\""+helper.firstLetterUpperCase(a.name)+"\");\n")
			buffer.append("		if(_"+a.name+"!=null){\n")	
			buffer.append(generateAssignmentObservable(a))
			buffer.append("			modifications.put(\""+helper.firstLetterUpperCase(a.name)+"\",this."+a.name+"Id);\n")
			buffer.append("			"+a.name+" = (IC_SupportedObject)objectManager.getObject("+a.name+"Id);\n")
			buffer.append("			"+a.name+".registerObserver(id);\n")			
			buffer.append("		}\n\n")	
			result?=buffer.toString()
		end
		
		operation generateNormalProcessModify(a : EStructuralFeature) : String is do
			var buffer : StringBuffer init StringBuffer.new
			var eref : EReference
			var ic : String init ""
			var type : String init a.eType.name
			var array : String init ""
			eref ?= a
			if eref != void then
				var isExtendsWorldObject : Boolean init helper.isExtendsObject(eref.eReferenceType,"WorldObject")
				if isExtendsWorldObject==true then
					ic := "IA_"
				end
			end
			if a.upperBound!=1 then
				array:="[]"
			end

			buffer.append("		final "+ic+type+array+" _"+a.name+" = ("+ic+type+array+")params.get(\""+helper.firstLetterUpperCase(a.name)+"\");\n")
			buffer.append("		if(_"+a.name+"!=null){\n")	
			buffer.append(generateAssignment(a))
			buffer.append("			modifications.put(\""+helper.firstLetterUpperCase(a.name)+"\",this."+a.name+");\n")
			buffer.append("		}\n\n")	
			result?=buffer.toString()
		end
	}
}