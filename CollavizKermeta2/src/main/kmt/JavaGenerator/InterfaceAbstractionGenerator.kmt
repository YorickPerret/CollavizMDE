using kermeta::standard::*
using kermeta::io::StdIO => stdio
using ecore::*
using Helper::*
using kermeta::io::*

package JavaGenerator{
	class InterfaceAbstractionGenerator inherits Generator, GenericGenerator
	{
		attribute helper : CollavizHelper
		
		method generate(p : EPackage) : Void is do 
			helper := CollavizHelper.new
			helper.initAuthorizedClasses()
			p.eClassifiers.each {c |
				if helper.isAuthorizedClasse(c.name) then
					var clazz : EClass
					clazz?=c
					if clazz != void then						
						//interfaces
						generateInterfaceClasses(clazz)
						
					end
				end
			}			
		end	
		
		operation generateInterfaceClasses(clazz : EClass) : Void is do
			var bufferInterface : String
			 
			//generating interfaces
			stdio.writeln("\n******** Generating Interface IA_"+clazz.name+" ********")
			bufferInterface ?= generateInterface(clazz)
			stdio.writeln("generating interface done")
			
			//save file
			stdio.writeln("******** Saving Interface IA_"+clazz.name+" ********")
			var resAInterface : String init helper.getPathToSaveJavaCode()+"/Abstraction/IA_"+clazz.name+".java"
			FileIO.writeTextFile(resAInterface.toURI(),bufferInterface)
			stdio.writeln("******** Save success ********")
		end
		
		operation generateInterface(clazz : EClass) : String is do
			var bufferInterface : StringBuffer init StringBuffer.new	
			bufferInterface.append(generatePackage(clazz))
			bufferInterface.append(generateImport(clazz))
			bufferInterface.append(generateBeginClasse(clazz))
			//operations
			clazz.eOperations.each{o |
				bufferInterface.append(generateOperation(o))
			}
			
			bufferInterface.append(generateEndClasse())
			result?=bufferInterface.toString()
		end
		
		method generatePackage(eclass : EClass) : String is do
			result?="package org.collaviz.iivc.abstraction\n\n"
		end

		
		method generateImport(clazz : EClass) : String is do
			result?="\n\n"
		end
		
		method generateBeginClasse(clazz : EClass) : String is do
			result?="public interface IA_"+clazz.name+" {\n"
		end
		

		method generateOperation(o : EOperation) : String is do
			var buffer : StringBuffer init StringBuffer.new
			 
			var typeRetour : EClass
			var ic : String init ""
			typeRetour ?=o.eType
			if typeRetour != void then
				var isExtendsWorldObject : Boolean init helper.isExtendsObject(typeRetour,"WorldObject")
				if isExtendsWorldObject==true then
					ic := "IA_"
				end
			end
			var array : String init ""
			if o.upperBound != 1 then
				array := "[]"		
			end
			
			buffer.append("	public "+ic+o.eType.name+array+" "+ o.name+" (")
			//parameters
			var virgule : Boolean init false
			o.eParameters.each{ p |
				if virgule==true then
					//others parameters
					buffer.append(", ")
				else
					//first parameter
					virgule:=true
				end
				
				var typeParam : EClass
				var icParam : String init ""
				typeParam ?=p.eType
				if typeParam != void then
					var isExtendsWorldObject : Boolean init helper.isExtendsObject(typeParam,"WorldObject")
					if isExtendsWorldObject==true then
						icParam := "IA_"
					end
				end
				var arrayParam : String init ""
				if p.upperBound != 1 then
					arrayParam := "[]"		
				end
				buffer.append(icParam+p.eType.name+arrayParam+" "+p.name)
			}
			buffer.append(");\n")   
			result?=buffer.toString()		
		end	
		method generateConstructor(eclass : EClass) : String is do
			result?=""
		end
		method generateAttribute(a : EStructuralFeature) : String is do
			result?=""
		end
	}
}