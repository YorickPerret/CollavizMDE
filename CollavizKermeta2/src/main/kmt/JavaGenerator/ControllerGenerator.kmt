using kermeta::standard::*
using kermeta::io::StdIO => stdio
using kermeta::io::FileIO
using ecore::*
using Helper::*

package JavaGenerator{
	class ControllerGenerator inherits Generator, GenericGenerator
	{

		method generate(p : EPackage) : Void is do 
			var helper : CollavizHelper init CollavizHelper.new
			helper.initAuthorizedClasses()
			p.eClassifiers.each {c |
				if helper.isAuthorizedClasse(c.name) then
					var clazz : EClass
					clazz?=c
					if clazz != void then
						//controllers
						generateControllersClasses(clazz)
						
					end
				end
			}			
		end
		
		operation generateControllersClasses(clazz : EClass) : Void is do
			//generating classes
			var bufferClassClient : StringBuffer init StringBuffer.new
			var bufferClassService : StringBuffer init StringBuffer.new
			
			stdio.writeln("\n******** Generating classes controllers CClient_"+clazz.name+" and CService_"+clazz.name+" ********")
			var superType : EClass init clazz.eSuperTypes.one
			bufferClassClient.append(generatePackageClient())
			bufferClassService.append(generatePackageService())
			bufferClassClient.append(generateImportClient(clazz))
			bufferClassService.append(generateImportService(clazz))
			bufferClassClient.append(generateBeginClasseClient(clazz,superType))
			bufferClassService.append(generateBeginClasseService(clazz,superType))
				
			bufferClassClient.append(generateConstructorClient(clazz))
			bufferClassService.append(generateConstructorService(clazz))	
			
			clazz.eOperations.each { o |
				bufferClassClient.append(generateOperation(o))
				bufferClassService.append(generateOperation(o))
			}			
			
			var tmp : String init generateEndClasse()
			bufferClassClient.append(tmp)
			bufferClassService.append(tmp)
			stdio.writeln("generating classe done")
			
			//save files
			stdio.writeln("******** Saving classes controllers CClient_"+clazz.name+" and CService_"+clazz.name+" ********")
			
			var resCClient : String init "platform:/resource/CollavizKermeta2/src/main/JavaCode/Controller/CClient_"+clazz.name+".java"
			FileIO.writeTextFile(resCClient.toURI(),bufferClassClient.toString())
			var resCService : String init "platform:/resource/CollavizKermeta2/src/main/JavaCode/Controller/CService_"+clazz.name+".java"
			FileIO.writeTextFile(resCService.toURI(),bufferClassService.toString())
			
			stdio.writeln("******** Save success ********")
		end
		

		
		method generatePackage(clazz : EClass) : String is do
			result?=""
		end	
		operation generatePackageClient() : String is do
			result?="package org.collaviz.iivc.control.client;\n"
		end	
		operation generatePackageService() : String is do
			result?="package org.collaviz.iivc.control.service;\n"
		end			
		
		method generateImport(clazz : EClass) : String is do
			result?=""
		end
		operation generateImportClient(clazz : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("import org.collaviz.collaboration.objects.abstraction.IA_SharedObject ;\n")
			buffer.append("import org.collaviz.collaboration.objects.control.client.CClient_ObjectManager ;\n")
			buffer.append("import org.collaviz.iivc.control.IC_"+clazz.name+" ;\n\n")
			result?=buffer.toString()
		end
		
		operation generateImportService(clazz : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("import org.collaviz.collaboration.objects.abstraction.IA_SharedObject ;\n")
			buffer.append("import org.collaviz.collaboration.objects.control.service.CService_ObjectManager ;\n")
			buffer.append("import org.collaviz.iivc.control.IC_"+clazz.name+" ;\n\n")
			result?=buffer.toString()
		end		

		
		method generateBeginClasse(eclass : EClass) : String is do
			result?=""
		end
		
		operation generateBeginClasseClient(eclass : EClass , esuperclass : EClass) : String is do
			result?="public class CClient_"+eclass.name+" extends CClient_"+esuperclass.name+" implements IC_"+eclass.name+" {\n\n"
		end
		
		operation generateBeginClasseService(eclass : EClass , esuperclass : EClass) : String is do
			result?="public class CService_"+eclass.name+" extends CService_"+esuperclass.name+" implements IC_"+eclass.name+" {\n\n"
		end
		
		method generateConstructor(eclass : EClass) : String is do
			result?=""
		end
		
		operation generateConstructorClient(eclass : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("	public CClient_"+eclass.name+"(IA_SharedObject abstraction, boolean referentProxyArchi, int accessLevel, CClient_ObjectManager objectManager) {\n")
			buffer.append("		super (abstraction, referentProxyArchi, accessLevel, objectManager) ;\n")
			buffer.append("	}\n\n")
			result?=buffer.toString()
		end
		
		operation generateConstructorService(eclass : EClass) : String is do
			var buffer : StringBuffer init StringBuffer.new
			buffer.append("	public CService_"+eclass.name+"(IA_SharedObject abstraction, boolean referentProxyArchi, int accessLevel, CService_ObjectManager objectManager) {\n")
			buffer.append("		super (abstraction, referentProxyArchi, accessLevel, objectManager) ;\n")
			buffer.append("	}\n\n")
			result?=buffer.toString()
		end

		
		method generateOperation(o : EOperation) : String is do
			var buffer : StringBuffer init StringBuffer.new
			var helper : CollavizHelper init CollavizHelper.new
			var typeRetour : EClass
			var ic : String init ""
			typeRetour ?=o.eType
			if typeRetour != void then
				var isExtendsWorldObject : Boolean init helper.isExtendsObject(typeRetour,"WorldObject")
				if isExtendsWorldObject==true then
					ic := "IC_"
				end
			end
			var array : String init ""
			if o.upperBound != 1 then
				array := "[]"		
			end
			
			buffer.append("	@Override\n")
			buffer.append("	public "+ic+o.eType.name+array+" "+ o.name+" (")
			//parameters
			var virgule : Boolean init false
			o.eParameters.each{ p |
				if virgule==true then
					//others parameters
					buffer.append(", ")
				else
					//first parameter
					virgule:=true
				end
				
				var typeParam : EClass
				var icParam : String init ""
				typeParam ?=p.eType
				if typeParam != void then
					var isExtendsWorldObject : Boolean init helper.isExtendsObject(typeParam,"WorldObject")
					if isExtendsWorldObject==true then
						icParam := "IC_"
					end
				end
				var arrayParam : String init ""
				if p.upperBound != 1 then
					arrayParam := "[]"		
				end
				buffer.append(icParam+p.eType.name+arrayParam+" "+p.name)
			}
			buffer.append("){\n")
			
			buffer.append("		callModificationMethod (\""+o.name+"\"")
			//parameters for callModificationMethod
			o.eParameters.each{ p |
				buffer.append(","+p.name)
			}
			
			buffer.append(");\n")
			
			buffer.append("	}\n\n")
			   
   
			result?=buffer.toString()		
		end
		
		method generateAttribute(a : EStructuralFeature) : String is do
			result?=""
		end
		
		
	}
}