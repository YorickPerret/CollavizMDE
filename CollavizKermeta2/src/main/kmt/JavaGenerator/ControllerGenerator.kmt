using kermeta::standard::*
using kermeta::io::StdIO => stdio
using kermeta::io::FileIO
using ecore::*
using Helper::*

package JavaGenerator{
	class ControllerGenerator inherits Generator, GenericGenerator
	{

		method generate(p : EPackage) : Void is do 
			// TODO: implement 'myOperation' operation
			stdio.writeln("\n\n******** Generating controllers ********\n\n")
			var helper : CollavizHelper init CollavizHelper.new
			helper.initAuthorizedClasses()
			p.eClassifiers.each {c |
				if helper.isAuthorizedClasse(c.name) then
					var bufferClassClient : StringBuffer init StringBuffer.new
					var bufferClassServer : StringBuffer init StringBuffer.new
					var clazz : EClass
					clazz?=c
					if clazz != void then
						//generating classes
						stdio.writeln("******** Generating classe "+clazz.name+" ********")
						var superType : EClass init clazz.eSuperTypes.one
						bufferClassClient.append(generateBeginClasseClient(clazz,superType))
						bufferClassServer.append(generateBeginClasseServer(clazz,superType))
						bufferClassClient.append(generateEndClasse())
						bufferClassServer.append(generateEndClasse())
						stdio.writeln("generating classe done")
						
						//save file
						stdio.writeln("Saving controllers")
						
						var resCClient : String init "platform:/resource/CollavizKermeta2/src/main/JavaCode/Controller/CClient_"+clazz.name+".java"
						FileIO.writeTextFile(resCClient.toURI(),bufferClassClient.toString())
						var resCServer : String init "platform:/resource/CollavizKermeta2/src/main/JavaCode/Controller/CServer_"+clazz.name+".java"
						FileIO.writeTextFile(resCServer.toURI(),bufferClassServer.toString())
						
						stdio.writeln("******** Save succes ********\n")
						
					end
				end
			}			
			stdio.writeln("Generating controllers finish")
		end
		
		method generateBeginClasse(eclass : EClass , esuperclass : EClass) : String is do
			result?=""
		end
		
		operation generateBeginClasseClient(eclass : EClass , esuperclass : EClass) : String is do
			result?="public class CClient_"+eclass.name+" extends CClient_"+esuperclass.name+" implements IC_"+eclass.name+" {"
		end
		
		operation generateBeginClasseServer(eclass : EClass , esuperclass : EClass) : String is do
			result?="public class CServer_"+eclass.name+" extends CServer_"+esuperclass.name+" implements IC_"+eclass.name+" {"
		end
		
		
		
		
	}
}